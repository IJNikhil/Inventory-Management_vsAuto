import React from 'react';
import { View, Text, StyleSheet } from 'react-native';
import { CalendarDays, User, FileText } from 'lucide-react-native';
import { format } from 'date-fns';
import type { Invoice } from '../../../types/database'; // ✅ FIXED: Use database types
import { useColors } from '../../../context/ThemeContext';

interface InvoiceDetailsProps {
  invoice: Invoice;
}

export default function InvoiceDetails({ invoice }: InvoiceDetailsProps) {
  const colors = useColors();

  return (
    <View style={styles.container}>
      <Text style={[styles.title, { color: colors.foreground }]}>Invoice Details</Text>
      <View style={styles.grid}>
        <DetailItem icon={<CalendarDays size={16} color={colors.primary} />} label="Date Issued">
          {format(new Date(invoice.invoice_date), 'PPP')} {/* ✅ FIXED: invoice_date */}
        </DetailItem>
        <DetailItem icon={<User size={16} color={colors.primary} />} label="Generated by">
          {invoice.generated_by} {/* ✅ FIXED: generated_by */}
        </DetailItem>
        {invoice.payment_date && ( // ✅ UPDATED: Show payment date if available
          <DetailItem icon={<CalendarDays size={16} color={colors.primary} />} label="Payment Date">
            {format(new Date(invoice.payment_date), 'PPP')}
          </DetailItem>
        )}
        {invoice.payment_method && ( // ✅ FIXED: payment_method
          <DetailItem icon={<FileText size={16} color={colors.primary} />} label="Payment Method">
            {invoice.payment_method.toUpperCase().replace('_', ' ')} {/* ✅ FIXED: Format snake_case to readable */}
          </DetailItem>
        )}
        {invoice.due_date && ( // ✅ ADDED: Show due date if available
          <DetailItem icon={<CalendarDays size={16} color={colors.primary} />} label="Due Date">
            {format(new Date(invoice.due_date), 'PPP')}
          </DetailItem>
        )}
      </View>
    </View>
  );
}

interface DetailItemProps {
  icon: React.ReactNode;
  label: string;
  children: React.ReactNode;
}

function DetailItem({ icon, label, children }: DetailItemProps) {
  const colors = useColors();
  
  return (
    <View style={styles.detailItem}>
      {icon}
      <View style={styles.detailContent}>
        <Text style={[styles.detailLabel, { color: colors.mutedForeground }]}>{label}</Text>
        <Text style={[styles.detailValue, { color: colors.foreground }]}>{children}</Text>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    marginHorizontal: 16,
    marginBottom: 8,
    borderRadius: 16,
    padding: 20,
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 16,
  },
  grid: {
    gap: 16,
  },
  detailItem: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: 12,
  },
  detailContent: {
    flex: 1,
  },
  detailLabel: {
    fontSize: 12,
    fontWeight: '600',
    textTransform: 'uppercase',
    marginBottom: 2,
  },
  detailValue: {
    fontSize: 15,
    fontWeight: '500',
  },
});


// import React from 'react';
// import { View, Text, StyleSheet } from 'react-native';
// import { CalendarDays, User, FileText } from 'lucide-react-native';

// import { format } from 'date-fns';
// import { Invoice } from '../../../types';
// import { useColors } from '../../../context/ThemeContext';

// interface InvoiceDetailsProps {
//   invoice: Invoice;
// }

// export default function InvoiceDetails({ invoice }: InvoiceDetailsProps) {
//   const colors = useColors();

//   return (
//     <View style={styles.container}>
//       <Text style={[styles.title, { color: colors.foreground }]}>Invoice Details</Text>
//       <View style={styles.grid}>
//         <DetailItem icon={<CalendarDays size={16} color={colors.primary} />} label="Date Issued">
//           {format(new Date(invoice.date), 'PPP')}
//         </DetailItem>

//         <DetailItem icon={<User size={16} color={colors.primary} />} label="Generated by">
//           {invoice.generatedBy}
//         </DetailItem>

//         {invoice.collectedBy && (
//           <DetailItem icon={<User size={16} color={colors.primary} />} label="Collected by">
//             {invoice.collectedBy}
//           </DetailItem>
//         )}

//         {invoice.paymentMethod && (
//           <DetailItem icon={<FileText size={16} color={colors.primary} />} label="Payment Method">
//             {invoice.paymentMethod}
//           </DetailItem>
//         )}
//       </View>
//     </View>
//   );
// }

// interface DetailItemProps {
//   icon: React.ReactNode;
//   label: string;
//   children: React.ReactNode;
// }

// function DetailItem({ icon, label, children }: DetailItemProps) {
//   const colors = useColors();

//   return (
//     <View style={styles.detailItem}>
//       {icon}
//       <View style={styles.detailContent}>
//         <Text style={[styles.detailLabel, { color: colors.mutedForeground }]}>{label}</Text>
//         <Text style={[styles.detailValue, { color: colors.foreground }]}>{children}</Text>
//       </View>
//     </View>
//   );
// }

// const styles = StyleSheet.create({
//   container: {
//     marginHorizontal: 16,
//     marginBottom: 8,
//     borderRadius: 16,
//     padding: 20,
//   },
//   title: {
//     fontSize: 18,
//     fontWeight: 'bold',
//     marginBottom: 16,
//   },
//   grid: {
//     gap: 16,
//   },
//   detailItem: {
//     flexDirection: 'row',
//     alignItems: 'flex-start',
//     gap: 12,
//   },
//   detailContent: {
//     flex: 1,
//   },
//   detailLabel: {
//     fontSize: 12,
//     fontWeight: '600',
//     textTransform: 'uppercase',
//     marginBottom: 2,
//   },
//   detailValue: {
//     fontSize: 15,
//     fontWeight: '500',
//   },
// });
